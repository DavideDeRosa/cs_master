import grpc
from concurrent import futures
import greet_pb2
import greet_pb2_grpc

"""
Implementing the GreetServiceServicer class that handles the Greet RPC, generated by the grpctools
"""
class GreetServiceServicer(greet_pb2_grpc.GreetServiceServicer):
    def Greet(self, request, context):
        response_message = f"Hello, {request.name}!"
        print(request.name)
        return greet_pb2.GreetResponse(message=response_message)

"""
Function that creates and starts the gRPC Server, adding the GreetService to the Server
"""
def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    greet_pb2_grpc.add_GreetServiceServicer_to_server(GreetServiceServicer(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    print("gRPC server is running on port 50051...")
    server.wait_for_termination()

if __name__ == "__main__":
    serve()